# 마법사 상어와 파이어스톰 - dfs
# 크기 2^N * 2^N 격자 얼음판
# A[r][c] : (r,c)에 있는 얼음량(없으면 0)
# 파이어스톰 시전
    # 시전할 때마다 단계 L 결정
    # 격자를 2^L * 2^L의 부분 격자로 나눔
    # 모든 부분 격자를 시계방향으로 90회전
    # 얼음이 있는 칸 3개이상 인접해 있지 않은 칸은 얼음량 -1
# 상하좌우 인접
# 파이어스톰을 총 q번 시전
    # 모든 파이어스톰을 시전한 후 남아있는 얼음 A[r][c]의 합
    # 남아있는 얼음 중 가장 큰 덩어리가 차지하는 칸의 개수
        # 덩어리 : 얼음 2칸 이상

# 입력 : n,q
# 2^n개의 줄에 각 칸에 있는 얼음량 배열 A
# 마법사 상어가 시전한 단계 L1,L2,...Lq
# 출력 : 남아있는 얼음의 합 A[r][c]의 합
# 가장 큰 덩어리가 차지하는 칸의 개수 (덩어리가 없으면 0 출력)

# DFS
import sys
n,q = map(int,sys.stdin.readline().split())
a=[[]]
for i in range(1,2**n+1):
    a.append(list(map(int,sys.stdin.readline().split())))
    a[i].insert(0,-1)
l = list(map(int,sys.stdin.readline().split()))
print(a)
print(l)


# 3 1
# 1 2 3 4 5 6 7 8
# 8 7 6 5 4 3 2 1
# 1 2 3 4 5 6 7 8
# 8 7 6 5 4 3 2 1
# 1 2 3 4 5 6 7 8
# 8 7 6 5 4 3 2 1
# 1 2 3 4 5 6 7 8
# 8 7 6 5 4 3 2 1
# 1
# #
# 284
# 64

# 3 2
# 1 2 3 4 5 6 7 8
# 8 7 6 5 4 3 2 1
# 1 2 3 4 5 6 7 8
# 8 7 6 5 4 3 2 1
# 1 2 3 4 5 6 7 8
# 8 7 6 5 4 3 2 1
# 1 2 3 4 5 6 7 8
# 8 7 6 5 4 3 2 1
# 1 2
# #
# 280
# 64

# 3 5
# 1 2 3 4 5 6 7 8
# 8 7 6 5 4 3 2 1
# 1 2 3 4 5 6 7 8
# 8 7 6 5 4 3 2 1
# 1 2 3 4 5 6 7 8
# 8 7 6 5 4 3 2 1
# 1 2 3 4 5 6 7 8
# 8 7 6 5 4 3 2 1
# 1 2 0 3 2
# #
# 268
# 64

# 3 10
# 1 2 3 4 5 6 7 8
# 8 7 6 5 4 3 2 1
# 1 2 3 4 5 6 7 8
# 8 7 6 5 4 3 2 1
# 1 2 3 4 5 6 7 8
# 8 7 6 5 4 3 2 1
# 1 2 3 4 5 6 7 8
# 8 7 6 5 4 3 2 1
# 1 2 0 3 2 1 2 3 2 3
# #
# 248
# 62

# 3 10
# 1 2 3 4 5 6 7 8
# 8 7 6 5 4 3 2 1
# 1 2 3 4 5 6 7 8
# 8 7 6 5 4 3 2 1
# 1 2 3 4 5 6 7 8
# 8 7 6 5 4 3 2 1
# 1 2 3 4 5 6 7 8
# 8 7 6 5 4 3 2 1
# 1 2 3 1 2 3 1 2 3 1
# #
# 246
# 60

# 3 10
# 1 0 3 4 5 6 7 0
# 8 0 6 5 4 3 2 1
# 1 2 0 4 5 6 7 0
# 8 7 6 5 4 3 2 1
# 1 2 3 4 0 6 7 0
# 8 7 0 5 4 3 2 1
# 1 2 3 4 5 6 7 0
# 0 7 0 5 4 3 2 1
# 1 2 3 1 2 3 1 2 3 1
# #
# 37
# 9