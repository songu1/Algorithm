# 동전 1 - 평범한 배낭과 비슷하게 품

# DP 문제 풀 때
    # 1. 일반적인 방법 : botton-up 방식으로 i=1부터 i=n까지의 dp 구하기
    # 2. 배낭문제, 동전1 문제(이전 인덱스의 값들과 현재 인덱스의 값을 구하는 과정에서 중복이 있을 때)
        # 각 가치마다 botton-up 방식으로 i=1부터 i=n까지의 dp 구하기
        # ex    가치 1 : i=1 ~ i=n
        #       가치 2 : i=1 ~ i=n
        #       ...

# n가지 종류의 동전, 각각의 동전이 나타내는 가치는 다름
# 동전을 적당히 사용해서 그 가치의 합이 k원이 되도록하는 경우의 수
# 각 동전은 여러번 사용 가능

# 입력 : n, k (1 ≤ n ≤ 100, 1 ≤ k ≤ 10,000) 
# 각 동전의 가치 (1~100,000)
# 출력 : 경우의 수

# 점화식 : d[i] = d[i] + d[i-v] (v는 동전 가치)

import sys

n, k = map(int,sys.stdin.readline().split())
value = []
d=[0]*(k+1)
for i in range(n):
    v = int(sys.stdin.readline())
    value.append(v)

d[0] = 1    # 계산의 편의를 위해(실제로 사용하지 않는 인덱스)

for v in value:
    for i in range(v,k+1):
        d[i] += d[i-v]

print(d[k])

# 해결 방법 예시
# i | 0 1 2 3 4 5 6 7 8 9 10
# ==========================
# 1 | 1 1 1 1 1 1 1 1 1 1 1     d[i] = d[i] + d[i-1]
# 2 | 1 1 2 2 3 3 4 4 5 5 6     d[i] = d[i] + d[i-2]
# 5 | 1 1 2 2 3 4 5 6 7 8 10    d[i] = d[i] + d[i-5]

# 3 10
# 1
# 2
# 5       # 10